{
  "_fv": 66,
  "_type": "animatedentity",
  "definition": {
    "mobName": "Керфур Омега",
    "mobLabel": "",
    "mobModelTexture": "omega_kerfu_blue.png",
    "mobModelGlowTexture": "omega_kefu_blue_glowmask.png",
    "visualScale": {
      "fixedValue": 0.6
    },
    "boundingBoxScale": {
      "fixedValue": 1.0
    },
    "entityDataEntries": [
      {
        "name": "kerfu",
        "type": "string",
        "value": "kerfu"
      },
      {
        "name": "serverList",
        "type": "string",
        "value": ""
      }
    ],
    "modelWidth": 0.6,
    "modelHeight": 1.8,
    "modelShadowSize": 0.5,
    "mountedYOffset": 0.0,
    "stepHeight": 0.6,
    "hasSpawnEgg": true,
    "spawnEggBaseColor": {
      "value": -65485,
      "falpha": 0.0
    },
    "spawnEggDotColor": {
      "value": -1,
      "falpha": 0.0
    },
    "creativeTabs": [
      {
        "value": "CUSTOM:VotV"
      }
    ],
    "isBoss": false,
    "bossBarColor": "PINK",
    "bossBarType": "PROGRESS",
    "equipmentMainHand": {
      "value": ""
    },
    "equipmentOffHand": {
      "value": ""
    },
    "equipmentHelmet": {
      "value": ""
    },
    "equipmentBody": {
      "value": ""
    },
    "equipmentLeggings": {
      "value": ""
    },
    "equipmentBoots": {
      "value": ""
    },
    "mobBehaviourType": "Creature",
    "mobCreatureType": "UNDEFINED",
    "attackStrength": 3,
    "attackKnockback": 0.0,
    "knockbackResistance": 0.0,
    "movementSpeed": 0.3,
    "armorBaseValue": 0.0,
    "trackingRange": 64,
    "followRange": 16,
    "health": 0,
    "xpAmount": 0,
    "waterMob": false,
    "flyingMob": false,
    "guiBoundTo": "<NONE>",
    "inventorySize": 9,
    "inventoryStackSize": 64,
    "deathTime": 20,
    "lerp": 4,
    "disableCollisions": false,
    "ridable": false,
    "canControlForward": false,
    "canControlStrafe": false,
    "immuneToFire": true,
    "immuneToArrows": true,
    "immuneToFallDamage": true,
    "immuneToCactus": true,
    "immuneToDrowning": true,
    "immuneToLightning": true,
    "immuneToPotions": true,
    "immuneToPlayer": true,
    "immuneToExplosion": true,
    "immuneToTrident": true,
    "immuneToAnvil": true,
    "immuneToWither": true,
    "immuneToDragonBreath": false,
    "mobDrop": {
      "value": ""
    },
    "livingSound": {
      "value": ""
    },
    "hurtSound": {
      "value": "CUSTOM:kerfu_meow"
    },
    "deathSound": {
      "value": "entity.generic.death"
    },
    "stepSound": {
      "value": ""
    },
    "raidCelebrationSound": {
      "value": ""
    },
    "onRightClickedOn": {
      "name": "KerfuRBM"
    },
    "hasAI": true,
    "aiBase": "(none)",
    "aixml": "<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"aitasks_container\" deletable=\"false\" x=\"-67\" y=\"-144\"><next><block type=\"java_code\"><field name=\"CODE\">this.goalSelector.addGoal(0, new Goal() {&amp;#10;\tprivate final KerfuOmegaEntity mob = KerfuOmegaEntity.this;&amp;#10;\tprivate BlockPos currentTarget = null;&amp;#10;\tprivate boolean lastHadTarget = false;&amp;#10;\tprivate String lastServerList = \"\";&amp;#10;\tprivate int repairCooldownTicks = 0;&amp;#10;&amp;#10;\t{&amp;#10;\t\tthis.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic boolean isInterruptable() {&amp;#10;\t\treturn true;&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic boolean requiresUpdateEveryTick() {&amp;#10;\t\treturn true;&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic boolean canUse() {&amp;#10;\t\tString list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;\t\tif (list != null &amp;&amp; !list.equals(lastServerList)) {&amp;#10;\t\t\tlastServerList = list;&amp;#10;\t\t\t/*&amp;#10;\t\t\tif (!mob.level().isClientSide() &amp;&amp; mob.level().getServer() != null) {&amp;#10;\t\t\t\tmob.level().getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\t\tComponent.literal(\"[KERFU DEBUG] canUse() → \" + list), false);&amp;#10;\t\t\t}&amp;#10;\t\t\t*/&amp;#10;\t\t}&amp;#10;\t\treturn list != null &amp;&amp; !list.isEmpty();&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic boolean canContinueToUse() {&amp;#10;\t\tString list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;\t\t// System.out.println(\"[KERFU DEBUG] canContinueToUse(): \" + list);&amp;#10;\t\treturn list != null &amp;&amp; !list.isEmpty();&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic void start() {&amp;#10;\t\t// System.out.println(\"[KERFU DEBUG] start() был вызван\");&amp;#10;\t\tselectNextTarget();&amp;#10;\t\t/*&amp;#10;\t\tSystem.out.println(\"[KERFU DEBUG] Navigation class: \" + mob.getNavigation().getClass().getName());&amp;#10;\t\tSystem.out.println(\"[KERFU DEBUG] onGround=\" + mob.onGround() +&amp;#10;\t\t\t\", speed=\" + mob.getAttributeValue(Attributes.MOVEMENT_SPEED));&amp;#10;\t\t*/&amp;#10;\t\t/*&amp;#10;\t\tif (currentTarget != null &amp;&amp; !mob.level().isClientSide() &amp;&amp; mob.level().getServer() != null) {&amp;#10;\t\t\tmob.level().getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\tComponent.literal(\"[KERFU DEBUG] start() → иду к \" + currentTarget.toShortString()), false);&amp;#10;\t\t}&amp;#10;\t\t*/&amp;#10;\t}&amp;#10;&amp;#10;\t@Override&amp;#10;\tpublic void tick() {&amp;#10;\t\t// System.out.println(\"[KERFU DEBUG] tick() вызывается\");&amp;#10;&amp;#10;\t\tif (repairCooldownTicks &gt; 0) {&amp;#10;\t\t\trepairCooldownTicks--;&amp;#10;\t\t\tmob.getNavigation().stop();&amp;#10;\t\t\tif (repairCooldownTicks == 59) {&amp;#10;\t\t\t\tmob.setAnimation(\"sits\");&amp;#10;\t\t\t}&amp;#10;\t\t\tif (repairCooldownTicks == 0) {&amp;#10;\t\t\t\tmob.setAnimation(\"empty\");&amp;#10;\t\t\t\tselectNextTarget();&amp;#10;\t\t\t}&amp;#10;\t\t\treturn;&amp;#10;\t\t}&amp;#10;&amp;#10;\t\tif (currentTarget == null) {&amp;#10;\t\t\tif (lastHadTarget) {&amp;#10;\t\t\t\tlastHadTarget = false;&amp;#10;\t\t\t\t/*&amp;#10;\t\t\t\tif (!mob.level().isClientSide() &amp;&amp; mob.level().getServer() != null) {&amp;#10;\t\t\t\t\tmob.level().getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\t\t\tComponent.literal(\"[KERFU DEBUG] tick() → цель потеряна\"), false);&amp;#10;\t\t\t\t}&amp;#10;\t\t\t\t*/&amp;#10;\t\t\t}&amp;#10;\t\t\treturn;&amp;#10;\t\t} else if (!lastHadTarget) {&amp;#10;\t\t\tlastHadTarget = true;&amp;#10;\t\t\t/*&amp;#10;\t\t\tif (!mob.level().isClientSide() &amp;&amp; mob.level().getServer() != null) {&amp;#10;\t\t\t\tmob.level().getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\t\tComponent.literal(\"[KERFU DEBUG] tick() → цель получена: \" + currentTarget.toShortString()), false);&amp;#10;\t\t\t}&amp;#10;\t\t\t*/&amp;#10;\t\t}&amp;#10;&amp;#10;\t\tPath path = mob.getNavigation().createPath(currentTarget, 0);&amp;#10;\t\t/*&amp;#10;\t\tSystem.out.println(\"[KERFU DEBUG] created path = \" + path);&amp;#10;\t\tSystem.out.println(\"BLOCK UNDER MOB: \" + mob.level().getBlockState(mob.blockPosition().below()));&amp;#10;\t\tSystem.out.println(\"BLOCK UNDER TARGET: \" + mob.level().getBlockState(currentTarget.below()));&amp;#10;\t\t*/&amp;#10;&amp;#10;\t\tmob.getNavigation().moveTo(&amp;#10;\t\t\tcurrentTarget.getX() + 0.5,&amp;#10;\t\t\tcurrentTarget.getY(),&amp;#10;\t\t\tcurrentTarget.getZ() + 0.5,&amp;#10;\t\t\t1.0&amp;#10;\t\t);&amp;#10;&amp;#10;\t\tif (!mob.getNavigation().isInProgress() &amp;&amp; !mob.level().isClientSide() &amp;&amp; mob.level().getServer() != null) {&amp;#10;\t\t\t/*&amp;#10;\t\t\tmob.level().getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\tComponent.literal(\"[KERFU DEBUG] ❌ Навигация не стартовала к \" + currentTarget.toShortString()), false);&amp;#10;\t\t\t*/&amp;#10;\t\t}&amp;#10;&amp;#10;\t\tif (mob.blockPosition().closerThan(currentTarget, 1.5)) {&amp;#10;\t\t\tLevelAccessor world = mob.level();&amp;#10;&amp;#10;\t\t\tif (world instanceof Level level) {&amp;#10;\t\t\t\tint x = currentTarget.getX();&amp;#10;\t\t\t\tint y = currentTarget.getY();&amp;#10;\t\t\t\tint z = currentTarget.getZ();&amp;#10;&amp;#10;\t\t\t\tint _value = 1;&amp;#10;\t\t\t\tBlockPos _pos = new BlockPos(x, y, z);&amp;#10;\t\t\t\tBlockState _bs = level.getBlockState(_pos);&amp;#10;\t\t\t\tif (_bs.getBlock().getStateDefinition().getProperty(\"blockstate\") instanceof IntegerProperty _prop &amp;&amp;&amp;#10;\t\t\t\t\t_prop.getPossibleValues().contains(_value)) {&amp;#10;\t\t\t\t\tlevel.setBlock(_pos, _bs.setValue(_prop, _value), 3);&amp;#10;\t\t\t\t}&amp;#10;&amp;#10;\t\t\t\tString key = new Vec3(x, y, z).toString().replace(\"(\", \"\").replace(\")\", \"\");&amp;#10;\t\t\t\tThisnotamodModVariables.MapVariables.get(level).datamap1.remove(key);&amp;#10;\t\t\t\tThisnotamodModVariables.MapVariables.get(level).datamap1.put(key, StringTag.valueOf(\"enabled\"));&amp;#10;\t\t\t\tThisnotamodModVariables.MapVariables.get(level).syncData(level);&amp;#10;&amp;#10;\t\t\t\t/*&amp;#10;\t\t\t\tif (!level.isClientSide() &amp;&amp; level.getServer() != null) {&amp;#10;\t\t\t\t\tlevel.getServer().getPlayerList().broadcastSystemMessage(&amp;#10;\t\t\t\t\t\tComponent.literal(\"[KERFU DEBUG] ✅ Починил сервер по координатам: \" + key), false);&amp;#10;\t\t\t\t}&amp;#10;\t\t\t\t*/&amp;#10;\t\t\t}&amp;#10;&amp;#10;\t\t\tString list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;\t\t\tString target = \"(\" + currentTarget.getX() + \".0, \" + currentTarget.getY() + \".0, \" + currentTarget.getZ() + \".0)\";&amp;#10;\t\t\tString newList = list.replace(target, \"\").replace(\")(\", \")(\");&amp;#10;\t\t\tmob.getEntityData().set(KerfuOmegaEntity.DATA_serverList, newList);&amp;#10;&amp;#10;\t\t\trepairCooldownTicks = 60;&amp;#10;\t\t\tcurrentTarget = null;&amp;#10;\t\t\tlastHadTarget = false;&amp;#10;\t\t}&amp;#10;\t}&amp;#10;&amp;#10;\tprivate void selectNextTarget() {&amp;#10;\t\tString list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;\t\tif (list == null || list.isEmpty()) {&amp;#10;\t\t\tcurrentTarget = null;&amp;#10;\t\t\treturn;&amp;#10;\t\t}&amp;#10;&amp;#10;\t\tjava.util.regex.Matcher matcher = java.util.regex.Pattern.compile(\"\\\\(([^)]+)\\\\)\").matcher(list);&amp;#10;\t\tif (matcher.find()) {&amp;#10;\t\t\tString[] xyz = matcher.group(1).split(\",\");&amp;#10;\t\t\tif (xyz.length == 3) {&amp;#10;\t\t\t\ttry {&amp;#10;\t\t\t\t\tint x = (int) Double.parseDouble(xyz[0].trim());&amp;#10;\t\t\t\t\tint y = (int) Double.parseDouble(xyz[1].trim());&amp;#10;\t\t\t\t\tint z = (int) Double.parseDouble(xyz[2].trim());&amp;#10;\t\t\t\t\tcurrentTarget = new BlockPos(x, y, z);&amp;#10;\t\t\t\t\treturn;&amp;#10;\t\t\t\t} catch (NumberFormatException ignored) {}&amp;#10;\t\t\t}&amp;#10;\t\t}&amp;#10;\t\tcurrentTarget = null;&amp;#10;\t}&amp;#10;});&amp;#10;</field><next><block type=\"java_code\"><field name=\"CODE\">this.goalSelector.addGoal(1, new Goal() {&amp;#10;    private final KerfuOmegaEntity mob = KerfuOmegaEntity.this;&amp;#10;    private Player target;&amp;#10;&amp;#10;    {&amp;#10;        this.setFlags(EnumSet.of(Goal.Flag.MOVE));&amp;#10;    }&amp;#10;&amp;#10;    @Override&amp;#10;    public boolean canUse() {&amp;#10;        // Не использовать эту цель, если есть задачи на ремонт&amp;#10;        String list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;        if (list != null &amp;&amp; !list.isEmpty()) return false;&amp;#10;&amp;#10;        target = mob.level().getNearestPlayer(mob, 128); // огромная дистанция&amp;#10;        return target != null;&amp;#10;    }&amp;#10;&amp;#10;    @Override&amp;#10;    public boolean canContinueToUse() {&amp;#10;        String list = mob.getEntityData().get(KerfuOmegaEntity.DATA_serverList);&amp;#10;        if (list != null &amp;&amp; !list.isEmpty()) return false;&amp;#10;&amp;#10;        return target != null &amp;&amp; target.isAlive() &amp;&amp; mob.distanceToSqr(target) &gt; 4;&amp;#10;    }&amp;#10;&amp;#10;    @Override&amp;#10;    public void start() {&amp;#10;        mob.getNavigation().moveTo(target, 1.2);&amp;#10;    }&amp;#10;&amp;#10;    @Override&amp;#10;    public void stop() {&amp;#10;        target = null;&amp;#10;        mob.getNavigation().stop();&amp;#10;    }&amp;#10;&amp;#10;    @Override&amp;#10;    public void tick() {&amp;#10;        if (target != null) {&amp;#10;            mob.getLookControl().setLookAt(target, 30.0F, 30.0F);&amp;#10;            mob.getNavigation().moveTo(target, 1.2);&amp;#10;        }&amp;#10;    }&amp;#10;});&amp;#10;</field><next><block type=\"swim_in_water\"><field name=\"condition\">null,null</field><next><block type=\"wander\"><field name=\"speed\">1</field><field name=\"condition\">null,null</field></block></next></block></next></block></next></block></next></block></xml>",
    "model": "omega_kerfu.geo.json",
    "groupName": "",
    "animation1": "idle",
    "animation2": "walk",
    "animation3": "",
    "animation4": "fix server",
    "animation5": "",
    "animation6": "",
    "animation7": "",
    "animation8": "",
    "animation9": "",
    "animation10": "",
    "enable2": true,
    "enable3": false,
    "enable4": false,
    "enable5": false,
    "enable6": false,
    "enable7": false,
    "enable8": false,
    "enable9": false,
    "enable10": false,
    "breedable": false,
    "tameable": false,
    "disableDeathRotation": true,
    "headMovement": false,
    "eyeHeight": false,
    "breedTriggerItems": [],
    "ranged": false,
    "rangedAttackItem": {
      "value": ""
    },
    "rangedItemType": "Default item",
    "rangedAttackInterval": 20,
    "rangedAttackRadius": 10.0,
    "height": 1.0,
    "raidSpawnsCount": [
      4,
      3,
      3,
      4,
      4,
      4,
      2
    ],
    "spawnThisMob": false,
    "doesDespawnWhenIdle": false,
    "spawningProbability": 20,
    "mobSpawningType": "misc",
    "minNumberOfMobsPerGroup": 4,
    "maxNumberOfMobsPerGroup": 4,
    "restrictionBiomes": [],
    "spawnInDungeons": false
  }
}