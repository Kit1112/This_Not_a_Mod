package net.code.thisnotamod.procedures;

import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.eventbus.api.Event;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.server.ServerLifecycleHooks;

import net.minecraft.resources.ResourceLocation;
import net.minecraft.resources.ResourceKey;
import net.minecraft.core.registries.Registries;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.util.RandomSource;
import net.minecraft.util.Mth;
import net.minecraft.network.chat.Component;
import net.minecraft.nbt.StringTag;
import net.minecraft.core.BlockPos;

import net.code.thisnotamod.network.ThisnotamodModVariables;
import net.code.thisnotamod.ThisnotamodMod;

import javax.annotation.Nullable;
import java.util.List;
import java.util.ArrayList;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–∞–≤—Ç–æ–ø–æ–ª–æ–º–∫–∏" —Å–µ—Ä–≤–µ—Ä–æ–≤ VotV.
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –≤ Overworld.
 */
@Mod.EventBusSubscriber
public class AutoBreakProcedure {
    @SubscribeEvent
    public static void onWorldTick(TickEvent.LevelTickEvent event) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–∫–∞ –≤ Overworld
        if (event.phase != TickEvent.Phase.END) return;
        if (event.level.isClientSide()) return;
        if (!event.level.dimension().location().equals(new ResourceLocation("minecraft", "overworld"))) return;

        execute(event, event.level);
    }

    public static void execute(LevelAccessor world) {
        execute(null, world);
    }

    private static void execute(@Nullable Event event, LevelAccessor world) {
        /* –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä. –ù–∞ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Ç–∏–∫–∞—Ö –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω,
           –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ server == null. */
        var server = ServerLifecycleHooks.getCurrentServer();
        if (server == null) return;

        // üìå –ò–∑–º–µ—Ä–µ–Ω–∏–µ, –≥–¥–µ —Å—Ç–æ—è—Ç —Å–µ—Ä–≤–µ—Ä–∞ VotV
        ServerLevel votvWorld = server.getLevel(
            ResourceKey.create(Registries.DIMENSION, new ResourceLocation("thisnotamod", "votv_questing"))
        );
        if (votvWorld == null || votvWorld.players().isEmpty()) return; // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Äì –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å

        long timeOfDay = world.dayTime() % 24000;

        // ‚è± –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤ –∫–æ–Ω—Ü–µ —Å—É—Ç–æ–∫
        if (timeOfDay >= 23990) {
            ThisnotamodModVariables.MapVariables.get(world).autobreakExecutedToday = false;
            ThisnotamodModVariables.MapVariables.get(world).syncData(world);
        }

        // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä–æ–≤—ã—Ö —Å—É—Ç–æ–∫
        if (timeOfDay == 1 && !ThisnotamodModVariables.MapVariables.get(world).autobreakExecutedToday) {
            ThisnotamodModVariables.MapVariables.get(world).autobreakExecutedToday = true;
            ThisnotamodModVariables.MapVariables.get(world).syncData(world);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ "—Å–ª–æ–º–∞—Ç—å" —Å–µ–≥–æ–¥–Ω—è (–æ—Ç 1 –¥–æ 3)
            ThisnotamodModVariables.autoBreakServList.clear();
            ThisnotamodModVariables.MapVariables.get(world).random = Mth.nextInt(RandomSource.create(), 1, 3);
            ThisnotamodModVariables.MapVariables.get(world).syncData(world);

            if (ThisnotamodModVariables.MapVariables.get(world).worldDebug) {
                server.getPlayerList().broadcastSystemMessage(
                    Component.literal("–ë—É–¥–µ—Ç —Å–ª–æ–º–∞–Ω–æ " + ThisnotamodModVariables.MapVariables.get(world).random + " —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è."),
                    false
                );
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            for (String key : ThisnotamodModVariables.MapVariables.get(world).datamap1.getAllKeys()) {
                ThisnotamodModVariables.autoBreakServList.add(key);
            }

            // üß† –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é ‚Äì –±—É–¥–µ–º –∏–∑ –Ω–µ—ë —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å
            List<String> remainingServers = new ArrayList<>();
            for (Object obj : ThisnotamodModVariables.autoBreakServList) {
                remainingServers.add(String.valueOf(obj));
            }

            int breaksToDo = (int) ThisnotamodModVariables.MapVariables.get(world).random;
            for (int i = 0; i < breaksToDo; i++) {
                if (remainingServers.isEmpty()) break;

                int index = Mth.nextInt(RandomSource.create(), 0, remainingServers.size() - 1);
                String key = remainingServers.remove(index);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "enabled"
                StringTag tag = ThisnotamodModVariables.MapVariables.get(world).datamap1.get(key) instanceof StringTag _s ? _s : null;
                if (tag == null || !"enabled".equals(tag.getAsString())) continue;

                // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–æ–∫–∞‚Äë—Å–µ—Ä–≤–µ—Ä–∞
                String[] coords = key.split(",");
                List<String> coordsList = new ArrayList<>();
                for (String c : coords) coordsList.add(c.trim());

                ThisnotamodModVariables.servCoordsForAutobreak.clear();
                ThisnotamodModVariables.servCoordsForAutobreak.addAll(coordsList);

                // –ö–æ–ø–∏—è –¥–ª—è –ª—è–º–±–¥—ã
                List<String> coordsCopy = new ArrayList<>(coordsList);

                // –ü–ª–∞–Ω–∏—Ä—É–µ–º "–ø–æ–ª–æ–º–∫—É" –≤ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
                ThisnotamodMod.queueServerWork(Mth.nextInt(RandomSource.create(), 1, 23999), () -> {
                    int brokenState = 2; // –∑–Ω–∞—á–µ–Ω–∏–µ IntegerProperty "blockstate", –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ —Å–ª–æ–º–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä

                    double x = parse(coordsCopy.get(0));
                    double y = parse(coordsCopy.get(1));
                    double z = parse(coordsCopy.get(2));

                    BlockPos pos = BlockPos.containing(x, y, z);
                    BlockState bs = votvWorld.getBlockState(pos);

                    if (bs.getBlock().getStateDefinition().getProperty("blockstate") instanceof IntegerProperty prop &&
                        prop.getPossibleValues().contains(brokenState)) {
                        votvWorld.setBlock(pos, bs.setValue(prop, brokenState), 3);
                    }

                    if (ThisnotamodModVariables.MapVariables.get(votvWorld).worldDebug) {
                        server.getPlayerList().broadcastSystemMessage(
                            Component.literal("–î–æ–ª–∂–µ–Ω –±—ã–ª —Å–ª–æ–º–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º X:" + coordsCopy.get(0) +
                                              " Y:" + coordsCopy.get(1) +
                                              " Z:" + coordsCopy.get(2)),
                            false
                        );
                    }
                });
            }
        }
    }

    private static double parse(String s) {
        try {
            return Double.parseDouble(s.trim());
        } catch (Exception e) {
            return 0;
        }
    }
}
